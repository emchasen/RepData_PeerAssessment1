distance <- c()
connect <- c()
plant[1]
plant[,1]
plant[1,]
distance <- c()
connect <- c()
for(i in 1:10){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, dst)
#append(connect, which.min(distance)
plant.data <- rbind(plant[which.min(distance),]) # row number from plant data for each harv. data
}
plant.data
distance
distance <- c()
connect <- c()
for(i in 1:10){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, dst)
#append(connect, which.min(distance)
plant.data <- rbind(plant[which.min(distance),]) # row number from plant data for each harv. data
}
plant.data <- data.frame()
distance <- c()
for(i in 1:10){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, dst)
#append(connect, which.min(distance)
plant.data <- rbind(plant[which.min(distance),]) # row number from plant data for each harv. data
}
plant.data
which.min(distance)
distance <- c()
connect <- c()
plant.data <- data.frame()
for(i in 1:10){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, dst)
#append(connect, which.min(distance))
plant.data <- rbind(plant[which.min(distance),]) # row number from plant data for each harv. data
}
rm(list = ls())
getwd()
harv <- read.csv("harvest_sample_data.csv", header = TRUE)
plant <- read.csv("planting_sample_data.csv", header = TRUE)
distance <- c()
connect <- c()
plant.data <- data.frame()
for(i in 1:2){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, dst)
#append(connect, which.min(distance))
plant.data <- rbind(plant[which.min(distance),]) # row number from plant data for each harv. data
}
which.min(dst)
distance <- c()
connect <- c()
plant.data <- data.frame()
for(i in 1:2){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
#distance <- append(distance, dst)
#append(connect, which.min(distance))
plant.data <- rbind(plant[which.min(dst),]) # row number from plant data for each harv. data
}
plant.data
distance <- c()
plant.data <- data.frame()
for(i in 1:5){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
#distance <- append(distance, dst)
#append(connect, which.min(distance))
plant.data <- rbind(plant[which.min(dst),]) # row number from plant data for each harv. data
}
distance <- c()
connect <- c()
plant.data <- data.frame()
for(i in 1:5){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
#distance <- append(distance, dst)
#append(connect, which.min(distance))
plant.data <- append(plant.data, (plant[which.min(dst),])) # row number from plant data for each harv. data
}
plant.data
bind_rows(plant[1,], plant[2,])
distance <- c()
connect <- c()
plant.data <- data.frame()
for(i in 1:5){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
#distance <- append(distance, dst)
#append(connect, which.min(distance))
plant.data <- bind_rows(plant[which.min(dst),]) # row number from plant data for each harv. data
}
for(i in 1:5){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, which.min(dst))
#append(connect, which.min(distance))
#plant.data <- bind_rows(plant[which.min(dst),]) # row number from plant data for each harv. data
}
distance
plant.data <- bind_rows(plant[distance,])
plant.data
plant.data <- data.frame()
plant.data <- rbind(plant[distance,])
plant.data
distance
distance <- c()
for(i in 1:10){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, which.min(dst)) # vector containing row number from plant data
}
plant.data <- data.frame()
plant.data <- rbind(plant[distance,])
plant.data
distance <- c()
for(i in 1:100){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, which.min(dst)) # vector containing row number from plant data
}
plant.data <- data.frame()
plant.data <- rbind(plant[distance,])
distance <- c()
for(i in 1:1000){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, which.min(dst)) # vector containing row number from plant data
}
distance <- c()
for(i in 1:5000){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, which.min(dst)) # vector containing row number from plant data
}
tail(distance)
distance[600]
distance[700]
distance[800]
distance <- c()
for(i in 1:10000){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, which.min(dst)) # vector containing row number from plant data
}
distance <- c()
for(i in 1:nrow(harv)){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, which.min(dst)) # vector containing row number from plant data
}
plant.data <- data.frame()
plant.data <- rbind(plant[distance,])
all.data <- cbind(harv, plant.data)
head(all.data)
all.data[1]
head(all.data)
test <- all.data[-c(1:2)]
test <- all.data[-c(4:5)]
head(test)
join_fun <- function(planting, harvest) {
#The function should read in the files from your local filesystem
#setwd("/Users/elissachasen/Desktop/farmers business network/")
plant <- read.csv(planting, header = TRUE)
harv <- read.csv(harvest, header = TRUE)
#determine the values of the planting variables (variety, seeding rate,
#and seed spacing) that should be associated with each harvest point.
#load libraries
library(dplyr)
#Please design, describe, and implement an algorithm that performs this
#association.
#Create loop that for each observation in harvest data finds the nearest
#observation in planting data by looking for the difference between div's that
# is smallest
distance <- c()
for(i in 1:nrow(harv)){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, which.min(dst)) # vector containing row number from plant data
}
# create plant data frame that will be as long as harvest data frame
plant.data <- data.frame()
plant.data <- rbind(plant[distance,])
# attach the new plant data to harvest data
all.data <- cbind(harv, plant.data)
# remove extra variables
final_data <- all.data[-c(4:5)]
write.csv(final_data, file = "Chasen_FBN_after_thought.csv")
}
rm(list = ls())
join_fun <- function(planting, harvest) {
#The function should read in the files from your local filesystem
#setwd("/Users/elissachasen/Desktop/farmers business network/")
plant <- read.csv(planting, header = TRUE)
harv <- read.csv(harvest, header = TRUE)
#determine the values of the planting variables (variety, seeding rate,
#and seed spacing) that should be associated with each harvest point.
#load libraries
library(dplyr)
#Please design, describe, and implement an algorithm that performs this
#association.
#Create loop that for each observation in harvest data finds the nearest
#observation in planting data by looking for the difference between div's that
# is smallest
distance <- c()
for(i in 1:nrow(harv)){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, which.min(dst)) # vector containing row number from plant data
}
# create plant data frame that will be as long as harvest data frame
plant.data <- data.frame()
plant.data <- rbind(plant[distance,])
# attach the new plant data to harvest data
all.data <- cbind(harv, plant.data)
# remove extra variables
final_data <- all.data[-c(4:5)]
write.csv(final_data, file = "Chasen_FBN_after_thought.csv")
}
join_fun("planting_sample_data.csv", "harvest_sample_data.csv")
join_fun <- function(planting, harvest) {
#The function should read in the files from your local filesystem
#setwd("/Users/elissachasen/Desktop/farmers business network/")
plant <- read.csv(planting, header = TRUE)
harv <- read.csv(harvest, header = TRUE)
#determine the values of the planting variables (variety, seeding rate,
#and seed spacing) that should be associated with each harvest point.
#load libraries
library(dplyr)
#Please design, describe, and implement an algorithm that performs this
#association.
#Create loop that for each observation in harvest data finds the nearest
#observation in planting data by looking for the difference between div's that
# is smallest
distance <- c()
for(i in 1:nrow(harv)){
lat = harv$lat[i]   # to later access the coordinates to snap to
long = harv$long[i]   # dto
dx <- lat - plant$lat # "westness" (the higher, the more "west")
dy <- long - plant$long # "southness"
dst = sqrt(dx^2 + dy^2) # distance
distance <- append(distance, which.min(dst)) # vector containing row number from plant data
}
# create plant data frame that will be as long as harvest data frame
plant.data <- data.frame()
plant.data <- rbind(plant[distance,])
# attach the new plant data to harvest data
all.data <- cbind(harv, plant.data)
# remove extra variables
final_data <<- all.data[-c(4:5)]
write.csv(final_data, file = "Chasen_FBN_after_thought.csv")
}
join_fun("planting_sample_data.csv", "harvest_sample_data.csv")
final_data[10:20]
final_data[10:20,]
yld_by_variety <-
final_data %>%
group_by(variety) %>%
summarize(mn = mean(yield),
sd = sd(yield)
)
q <- ggplot(yld_by_variety, aes(x = variety, y = mn, col = variety))
q +     geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=mn-sd, ymax=mn+sd), width=.1)+
theme_bw() +
labs(x = "Variety", y = "Yield (+/- sd)") +
labs(title = "Variety performance")+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
v_mod <- lm(yield~variety, data = final_data)
anova(v_mod)
summary(v_mod)
vsr_mod <- lm(yield~variety*seeding_rate, data = final_data)
anova(vsr_mod)
summary(vsr_mod)
g <- ggplot(data_set, aes(seeding_rate, yield))
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~variety) +
g <- ggplot(final_data, aes(seeding_rate, yield))
g <- ggplot(final_data, aes(seeding_rate, yield))
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~variety) +
labs(x = "Seeding rate", y = "Yield", title = "Yield response by seeding rate and variety") +
theme_bw()
sr_mod <- lm(yield~seeding_rate, data = dat)
sr_mod <- lm(yield~seeding_rate, data = final_data)
anova(sr_mod)
summary(seeding_rate)
summary(sr_mod)
p <- ggplot(data = dat, aes(seeding_rate, yield))
p <- ggplot(data = final_data, aes(seeding_rate, yield))
p+ geom_point() + geom_smooth(method = "lm")
d <- ggplot(final_data, aes(long.x, lat.x, color=yield))
d +geom_point(size = 3, alpha = 1) +
labs(x="Longitude", y = "Latitude", title = "Yield response over space")
d <- ggplot(final_data, aes(long, lat, color=yield))
d +geom_point(size = 3, alpha = 1) +
labs(x="Longitude", y = "Latitude", title = "Yield response over space")
png("Space_yield.png")
d <- ggplot(final_data, aes(long, lat, color=yield))
d +geom_point(size = 3, alpha = 1) +
labs(x="Longitude", y = "Latitude", title = "Yield response over space")
dev.off()
ls -l /Library/Frameworks/R.framework/Versions/
?
)
R.version.string
setwd("./Google Drive/Steffan Lab/SPLAT ms/data/")
getwd()
setwd("/Users/elissachasen/Google Drive/Steffan Lab/SPLAT ms/data/")
dat <- read.table('damaged_berries_14.txt', header = TRUE)
dat$week<-as.factor(dat$week)
setwd("../figures")
newData <- dat[-c(1:2, 25:26), ]
newData$D <- newData$marsh:newData$date
stripchart(damage ~ trt, newData, pch=19, cex = 2.5,
col = "black",
vertical=TRUE, ylab='Damaged berries', xlab='Treatment')
for(D in split(newData, newData$D))
lines(damage ~ trt, D, lwd = 3, lend = 1, col = "darkgrey")
stripchart(damage ~ trt, newData, pch=19, cex = 2.5,
col = "black",
vertical=TRUE, ylab='Damaged berries', xlab='Treatment')
for(D in split(newData, newData$D))
lines(damage ~ trt, D, lwd = 3, lend = 1)
stripchart(damage ~ trt, newData, pch=19, cex = 2.5,
col = "black",
vertical=TRUE, ylab='Damaged berries', xlab='Treatment')
for(D in split(newData, newData$D))
lines(damage ~ trt, D, lwd = 2, lend = 1)
stripchart(damage ~ trt, newData, pch=19, cex = 2,
col = "black",
vertical=TRUE, ylab='Damaged berries', xlab='Treatment')
for(D in split(newData, newData$D))
lines(damage ~ trt, D, lwd = 2, lend = 1)
jpeg("Damaged Berries.jpg")
stripchart(damage ~ trt, newData, pch=19, cex = 2,
col = "black",
vertical=TRUE, ylab='Damaged berries', xlab='Treatment')
for(D in split(newData, newData$D))
lines(damage ~ trt, D, lwd = 2, lend = 1)
dev.off()
stripchart(damage ~ trt, newData, pch=19, cex = 2,
col = "black",
vertical=TRUE, ylab='Damaged berries', xlab='Treatment')
for(D in split(newData, newData$D))
lines(damage ~ trt, D, lwd = 1, lend = 1)
jpeg("Damaged Berries.jpg")
stripchart(damage ~ trt, newData, pch=19, cex = 2,
col = "black",
vertical=TRUE, ylab='Damaged berries', xlab='Treatment')
for(D in split(newData, newData$D))
lines(damage ~ trt, D, lwd = 1, lend = 1)
dev.off()
1:10
getwd()
setwd("/Users/elissachasen/Google Drive/coursera/reproducible research/project 1/")
ls
ls()
list.files()
unzip("activity.zip")
list.files()
read.csv("activity.csv")
act <- read.csv("activity.csv")
head(act)
str(act)
steps_per_day <-aggregate(act, by=list(day),
FUN=mean, na.rm=TRUE)
steps_per_day <-aggregate(act, by=list(date),
FUN=mean, na.rm=TRUE)
steps_per_day <-aggregate(act, by=list(date),
FUN=mean, na.rm=FALSE)
steps_per_day <-aggregate(act, by=date,
FUN=mean, na.rm=TRUE)
steps_per_day <- act %>%
group_by(date) %>%
summarize(total_steps = sum(steps),
mean_steps = mean(steps),
med_steps = median(steps)
)
steps_per_day$total_steps
hist(steps_per_day$total_steps)
steps_per_day$mean_steps
steps_per_day$med_steps
str(act)
median(act$step)
median(act$step, na.rm = TRUE)
range(act$steps)
median(act$stepa, na.rm = TRUE)
median(act$steps, na.rm = TRUE)
range(act$steps, na.rm = TRUE)
is.na(act)
steps_per_day <- act %>%
is.na() %>%
group_by(date) %>%
summarize(total_steps = sum(steps),
mean_steps = mean(steps),
med_steps = median(steps)
)
steps_per_day <- act %>%
group_by(date) %>%
summarize(total_steps = sum(steps),
mean_steps = mean(steps, na.rm = TRUE),
med_steps = median(steps, na.rm = TRUE)
)
steps_per_day$mean_steps
steps_per_day <- act %>%
group_by(date) %>%
summarize(total_steps = sum(steps),
mean_steps = mean(steps),
med_steps = median(steps)
)
steps_per_day$med_steps
tapply(act$steps, act$date, mean)
tapply(act$steps, act$date, median)
summary(act)
mean <- tapply(act$steps, act$date, mean)
med <- tapply(act$steps, act$date, median)
mn <- tapply(act$steps, act$date, mean)
str(act)
range(act$interval)
with(act, plot(interval, steps))
with(act, plot(interval, steps, type = "l"))
act$interval.factor <- as.factor(act$interval)
with(act, plot(interval, steps, type = "l"))
with(act, plot(interval, steps, type = "l"))
with(act, plot(interval.factor, steps, type = "l"))
plot.new()
with(act, plot(interval.factor, steps, type = "l"))
with(act, plot(interval, steps, type = "l"))
by_interval <- act %>%
group_by(interval.factor) %>%
summarise(mn_stp = mean(steps))
head(by_interval)
by_interval <- act %>%
group_by(interval.factor) %>%
summarise(mn_stp = mean(steps, na.rm = TRUE))
head(by_interval)
with(by_interval, plot(interval.factor, mn_stp, type = "l"))
group_by(interval) %>%
)
by_interval <- act %>%
group_by(interval) %>%
summarise(mn_stp = mean(steps, na.rm = TRUE))
with(by_interval, plot(interval, mn_stp, type = "l"))
which.max(by_interval)
which.max(by_interval$mn_stp)
by_interval$mn_stp[104]
